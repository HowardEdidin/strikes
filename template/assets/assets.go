// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 6, 13, 12, 37, 717589534, time.UTC),
		},
		"/terraform": &vfsgen۰DirInfo{
			name:    "terraform",
			modTime: time.Date(2018, 10, 6, 13, 12, 51, 827018376, time.UTC),
		},
		"/terraform/basic": &vfsgen۰DirInfo{
			name:    "basic",
			modTime: time.Date(2018, 10, 6, 14, 23, 45, 239203128, time.UTC),
		},
		"/terraform/basic/NOTE.txt": &vfsgen۰CompressedFileInfo{
			name:             "NOTE.txt",
			modTime:          time.Date(2018, 10, 6, 14, 35, 30, 7047341, time.UTC),
			uncompressedSize: 284,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x4e\x03\x31\x10\x44\x7b\x7f\xc5\xf0\x03\x4e\x7f\x1d\x48\x90\x0e\x45\x88\x86\x72\x71\xe6\xc8\x09\x9f\x6d\x79\xd7\xa0\x60\xdd\xbf\xa3\x5c\xc8\x89\x6e\xe7\xe9\x69\x35\xd3\xbb\x3f\x48\xf8\x94\x0f\x3e\xcb\xcc\x65\x41\xb9\x26\x68\x0b\x81\xaa\x63\x8b\xf1\x8c\x23\x4b\xcc\x67\x1e\xef\x9c\x3b\x44\x8a\x12\x95\x23\x2b\xec\xc4\xf5\xd6\xdc\x6a\xa0\x0e\x70\xee\xe5\x2f\x60\x5f\x73\x2b\xc0\x80\xde\xfd\x0d\xae\xec\x95\x73\x89\x62\x5c\x16\x77\xff\xd3\x2a\xf1\xd4\x52\xb0\x29\x27\xbd\xca\x2b\xdc\xd8\x3f\xdb\xed\x33\x2c\xe3\x64\x56\x74\xd8\xed\x7a\xf7\x8f\xe9\x6b\xaa\x39\xcd\x4c\xf6\x20\xba\x4e\xd8\x7c\x29\xc5\xcb\xe5\xd5\x37\xdf\x75\x32\xaa\x4f\xb4\x1d\xf0\x96\x1b\x82\x24\x28\x79\xe9\x0f\x89\x11\xe3\xd6\xe0\xb6\xd4\xc3\xb9\xdf\x00\x00\x00\xff\xff\xb4\xa0\xcc\x16\x1c\x01\x00\x00"),
		},
		"/terraform/basic/manifest.yaml": &vfsgen۰CompressedFileInfo{
			name:             "manifest.yaml",
			modTime:          time.Date(2018, 10, 6, 14, 30, 1, 205295059, time.UTC),
			uncompressedSize: 325,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x6b\xc3\x30\x10\x85\xf7\xfb\x15\x07\x99\x6b\xd2\xd5\x5b\xa1\x74\x0c\xc1\xc9\xd4\xed\xe2\x9c\xd3\x6b\x64\x4b\x9c\x2e\x86\x34\xdc\x7f\x2f\x96\x5b\x94\x4d\x9f\x3e\xe9\x3d\xde\x06\x0f\xa6\x72\xe5\x8c\x89\xfa\x2b\x5d\x18\x47\x9a\x64\xe0\x6c\x38\x48\x60\x80\x89\x46\x6e\xf1\xf1\x68\xf6\xab\xdf\xd1\xc8\xee\x70\xe6\xdc\xab\x24\x93\x38\x15\xfb\x5e\xd9\x1d\x81\x6e\xf6\x15\xb5\x98\xb7\x72\x74\x87\xa4\xf1\x9b\x7b\xdb\xd3\xe5\x2f\xb0\x72\xb5\x1d\xa7\xf8\x6c\x17\x76\x07\xd8\x60\xc7\x81\x29\x33\xc0\xcc\x9a\x4b\xed\x6b\xb3\x6d\xb6\xcb\xc7\x59\xce\xac\xc7\x7b\xe2\x16\x8f\xac\x4a\x43\xd4\x11\x74\x7d\xbf\x8b\xb6\xd6\x75\x95\xdd\x61\x96\x2c\x27\x09\x62\xf7\x16\xd3\xed\x14\xa4\x87\x6c\xa4\x76\x28\x2b\x5a\xb4\xff\x9c\xc6\x06\xf8\x91\xf4\x21\xa1\x4c\xcf\x2d\xbc\x2c\x69\x9f\xf5\xca\xfd\x37\x00\x00\xff\xff\x00\x5a\x02\xb7\x45\x01\x00\x00"),
		},
		"/terraform/basic/terraform.tf": &vfsgen۰CompressedFileInfo{
			name:             "terraform.tf",
			modTime:          time.Date(2018, 10, 6, 14, 35, 36, 827505464, time.UTC),
			uncompressedSize: 3203,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x10\x4c\x0f\xbb\x40\x22\x3b\xfb\x71\xe8\x02\x39\xa4\xa9\x93\x35\xb2\x71\x0c\xcb\x41\x50\x2c\x0a\x81\x96\xc6\x32\x6b\x89\x24\x48\xca\x89\x63\x68\x7f\xfb\x82\x22\xad\x2f\xcb\x49\x83\xd6\x27\x8b\x33\x7c\x7c\xf3\x66\x86\xc3\x13\x14\x80\xdc\xd0\x08\xd0\x54\x52\x16\x51\x91\x82\xb7\x21\x92\x92\x45\x0a\x08\xab\x7c\xa1\x22\x49\x85\xa6\x9c\x85\x34\xc6\x68\x57\x34\xac\x51\x4a\x81\xe9\xa3\xeb\x0a\x22\x09\xba\x63\xd3\xc0\x48\xbd\xc7\x3b\x41\x33\x50\x3c\x97\x11\xa0\x1b\xc9\x73\xd1\xf0\x94\xce\x10\x26\xc6\x80\xd1\xce\x43\x28\x86\x25\xc9\x53\x8d\x2e\x10\xde\xed\xfc\x29\x89\xd6\x24\x81\x09\xc9\xa0\x28\xce\x64\x82\xbd\xe6\x49\x29\x8f\x88\xe1\x7d\xb0\xf3\x1b\x11\x84\x01\x51\xba\xed\xaf\x49\x12\x32\x92\xc1\x9b\x27\x99\x6d\x8d\x7d\xc0\x36\x54\x72\x96\x99\x90\x17\x44\xc1\x3b\x40\x4c\xf4\x82\x2b\xaa\xb9\xdc\xa2\x00\xb4\xa6\x2c\x51\x5e\x4b\x83\xbd\xd9\x42\xe7\x92\x5a\xe4\x16\xf6\x4a\x6b\xa1\xfe\x1a\x0c\x94\x96\x74\x0d\xca\x6c\x82\x8f\x00\xdf\xfe\x7c\xfe\xdd\x5f\xa4\x7c\xe1\x47\x5c\x82\xff\x44\x59\xcc\x9f\x94\xcf\x40\x0f\x6a\xdc\x81\x23\x32\x25\x11\x59\x27\x80\x54\x0f\x0b\x61\x89\x37\x02\x3b\x41\xf0\x4c\x32\x53\x2b\xe6\x7f\x93\x0a\xa4\x29\x3f\x7b\xe2\x32\x8d\x3b\x32\xed\x41\x36\x20\x55\x95\x95\x63\x38\xe7\xfe\xd0\x1f\xf6\xef\x7f\xa1\xa2\x24\x12\x0e\xf7\x4a\x34\x41\xfa\xe8\xf8\x2f\x54\xb8\x28\x03\x01\x11\x5d\x6e\x91\x5e\x01\x4a\x09\x4b\x72\x92\x00\xe2\xcb\xf2\xdb\x1d\xd0\xac\x20\xe7\xd1\x23\x79\xcc\x35\x83\xb2\x80\x3c\x21\xf9\x86\xc6\x20\x11\x26\x2f\xb9\x04\x99\x39\xf7\xaa\x3b\x8c\xff\x87\xdd\x86\x48\xbf\x5a\x2a\x70\xc3\xc3\xf6\xc9\x81\x97\x5d\xb6\x9e\x9d\x3e\xac\x7d\x3b\x06\xeb\x5d\xf5\x58\xed\x57\x2d\xd9\xc2\xdb\xf7\x56\xc5\x39\xec\x76\x1b\xd6\xa0\xb4\x8d\xc4\xa8\x6d\xc2\xaf\xd1\xda\xce\xe5\xa1\xfb\x6e\xab\x9d\xf6\x2b\xa5\x59\x93\x44\x39\x15\x4b\xb8\x9a\x98\xeb\xba\xd2\xab\x68\x73\x93\x84\xc5\x3c\x0b\x4d\x59\xb3\x04\x9b\xdb\x68\xb9\xa4\xcf\x96\x54\x0a\x2c\xd1\x2b\x74\x81\xfe\xf0\x10\x52\x26\xad\x24\x45\x17\x68\x49\x52\x65\xea\x20\x17\x02\x64\xf5\xdd\x1b\xb1\xd2\x5c\x9a\x82\x22\x51\xc4\x73\xa6\xfb\x43\xee\xfe\x4a\xde\x12\x44\x4a\x22\xf8\xc5\xf0\xef\xed\xfe\x53\x7c\x86\x4f\x31\xfe\xb5\x50\xe4\xc3\xae\x15\x85\x6f\x63\x30\x0a\xe6\xa9\x4d\x6e\x5b\xcc\xb0\x3e\xba\x3c\xab\x3f\x3f\xbe\xa1\xea\x57\xba\x55\xe2\xf7\xd2\x7d\x0d\xa2\x95\x24\xa7\x44\xa8\x29\xc8\x2e\x4c\xa0\x09\x8b\x89\x8c\x9b\x7e\x46\x07\x6a\xf7\x87\x7a\x2b\xca\xac\xfe\x33\x0b\x70\x79\xf3\x09\x60\xb1\x0a\xcb\x82\xf8\x17\xf7\x69\x80\xbf\xf6\xe7\x85\x08\x11\x2a\x3b\x93\x42\x91\x12\xf6\x66\x62\xaa\x5a\xea\xcd\x45\x51\x62\x1c\x11\xe9\x7d\xfa\xf4\x65\xea\xfb\x93\xb4\xa6\x2c\xee\xa1\x7e\x9d\xb3\xc8\x9c\x70\x29\x04\xf6\x4c\x2d\xaf\x73\xd7\x28\x65\x1a\x2e\x10\xfe\xbc\x65\x24\xa3\x51\xd9\xda\x48\xd1\x97\xf2\xd0\x2f\xe7\x3d\x0d\xd3\x90\xb0\x4a\x0c\x65\x8a\x26\x2b\xad\x7e\x54\x46\x42\x5f\x11\xd1\x4c\xd3\x5c\xfd\xb8\x46\x4d\xe2\x65\x45\x59\xf8\x47\x58\xb8\x0b\xfc\x8a\xab\x8c\xab\xcf\x9f\x7a\xae\x09\xca\x34\x24\x20\x31\xc2\xf5\x90\xcc\xa8\xa9\xbf\xf3\xe1\x70\x38\xb4\xdf\xe4\x19\x5d\xa0\x8f\xe6\xd7\xaf\xdc\xd2\x65\xc3\x48\xf8\x7d\x37\xc2\x9b\xba\x99\xbc\xbe\xd2\xa2\x3f\xa1\x06\xdf\x7b\x5d\x74\x3b\xcc\x4c\x8a\x1e\x8c\xae\x9b\x45\x71\x43\x66\x7f\x7b\x46\x9c\x31\xb0\x92\xd9\xee\x6e\x63\x74\x2e\x59\x0b\x21\x24\xcd\x88\xdc\x1e\xee\x2d\x91\xdd\x03\xc1\xe0\xfc\xf7\x5b\xd9\x12\x96\x88\x7d\x97\xb8\xc4\xe2\xcb\xe9\x74\x3c\x09\xc6\x37\x7f\xcf\x83\x70\x3c\x09\xe6\xb3\x87\xbb\xd1\x64\x7e\x39\x1f\xdf\x4f\x6e\x47\x5f\xf0\x41\x24\x07\xfd\xe0\xa2\x61\x4a\xcb\xdc\xa4\xcc\x5a\xd7\xb0\xb5\x33\x14\xe1\xeb\x87\xc9\x95\x81\x0b\xc2\xc7\xfb\xd9\xed\x68\x16\xce\x1e\x26\xf3\xf1\xdd\x08\x37\x46\x9c\x7b\x20\xb8\x2d\x27\x68\xbe\xa2\x0a\x25\xdc\xc8\xa0\x39\x8a\x56\x84\x25\x80\x28\xd3\x1c\x3d\x8e\x3e\x05\xe3\xf9\xc8\x80\x84\xd7\xb3\xfb\xbb\x70\x7a\x79\x75\x7b\x79\x33\xb2\x67\x1d\xb3\xe2\xe6\xcc\x3d\x78\x0a\x16\xd6\xd2\x7c\x9e\x15\x83\xf6\x9a\x13\xb3\x18\xb8\x85\x8e\xb9\x7e\x4c\xb9\xf9\x7b\x78\x75\xbf\x5a\x0d\xf8\xf4\xd8\x0b\xe2\xc0\xdc\x57\x09\xf8\x2b\xf2\x0a\xef\xff\x00\x00\x00\xff\xff\xe3\x8c\x9d\x2f\x83\x0c\x00\x00"),
		},
		"/terraform/basic/values.hcl": &vfsgen۰CompressedFileInfo{
			name:             "values.hcl",
			modTime:          time.Date(2018, 10, 6, 14, 23, 45, 241802409, time.UTC),
			uncompressedSize: 349,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x51\xaa\xc2\x30\x10\x45\xff\xb3\x8a\x21\xbf\xef\xf5\x75\x05\x6f\x0b\xe2\x0e\xca\x6d\x3b\xc6\x68\x3b\x29\xc9\xa4\x20\x25\x7b\x17\x41\xb1\x45\x41\xff\xe7\xdc\x73\x66\x46\xf4\x68\x07\x26\xcb\x32\xfb\x18\x64\x64\xd1\xa6\x45\xe2\x46\x30\xb2\xa5\xc5\x10\xf5\x7c\x40\x1e\x94\xfe\xc9\x2e\xcb\xdf\x1e\xdd\x19\x8e\x77\x18\xb9\x14\x6b\x8a\x79\x6e\x44\x4e\x21\xc7\x8e\x1b\x17\x43\x9e\x3e\xc2\x55\x74\x96\xea\x9a\xda\xcb\xe3\xea\x97\xb6\x13\xe4\x13\xe9\x91\xe9\x6d\x1c\xfd\x50\x15\x9d\x29\x66\x55\x30\x84\x0e\xea\x83\xbc\xb8\x4f\x98\x20\x8c\xa4\x76\x0b\x28\xdc\xf7\x9f\xae\x45\x10\x97\xe1\xee\xdc\x86\xec\x83\x0a\xdf\x3c\xd7\x00\x00\x00\xff\xff\xbd\x23\xeb\xb9\x5d\x01\x00\x00"),
		},
		"/terraform/cosmos": &vfsgen۰DirInfo{
			name:    "cosmos",
			modTime: time.Date(2018, 10, 6, 13, 12, 44, 194673782, time.UTC),
		},
		"/terraform/cosmosSearch": &vfsgen۰DirInfo{
			name:    "cosmosSearch",
			modTime: time.Date(2018, 10, 6, 13, 12, 51, 826998782, time.UTC),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform"].(os.FileInfo),
	}
	fs["/terraform"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/basic"].(os.FileInfo),
		fs["/terraform/cosmos"].(os.FileInfo),
		fs["/terraform/cosmosSearch"].(os.FileInfo),
	}
	fs["/terraform/basic"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/terraform/basic/NOTE.txt"].(os.FileInfo),
		fs["/terraform/basic/manifest.yaml"].(os.FileInfo),
		fs["/terraform/basic/terraform.tf"].(os.FileInfo),
		fs["/terraform/basic/values.hcl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
