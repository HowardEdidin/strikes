// Code generated by MockGen. DO NOT EDIT.
// Source: services/storage/model.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	storage "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2017-06-01/storage"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAccountsClient is a mock of IAccountsClient interface
type MockIAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsClientMockRecorder
}

// MockIAccountsClientMockRecorder is the mock recorder for MockIAccountsClient
type MockIAccountsClientMockRecorder struct {
	mock *MockIAccountsClient
}

// NewMockIAccountsClient creates a new mock instance
func NewMockIAccountsClient(ctrl *gomock.Controller) *MockIAccountsClient {
	mock := &MockIAccountsClient{ctrl: ctrl}
	mock.recorder = &MockIAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsClient) EXPECT() *MockIAccountsClientMockRecorder {
	return m.recorder
}

// CheckNameAvailability mocks base method
func (m *MockIAccountsClient) CheckNameAvailability(ctx context.Context, accountName storage.AccountCheckNameAvailabilityParameters) (storage.CheckNameAvailabilityResult, error) {
	ret := m.ctrl.Call(m, "CheckNameAvailability", ctx, accountName)
	ret0, _ := ret[0].(storage.CheckNameAvailabilityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNameAvailability indicates an expected call of CheckNameAvailability
func (mr *MockIAccountsClientMockRecorder) CheckNameAvailability(ctx, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameAvailability", reflect.TypeOf((*MockIAccountsClient)(nil).CheckNameAvailability), ctx, accountName)
}

// Create mocks base method
func (m *MockIAccountsClient) Create(ctx context.Context, resourceGroupName, accountName string, parameters storage.AccountCreateParameters) (storage.AccountsCreateFuture, error) {
	ret := m.ctrl.Call(m, "Create", ctx, resourceGroupName, accountName, parameters)
	ret0, _ := ret[0].(storage.AccountsCreateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsClientMockRecorder) Create(ctx, resourceGroupName, accountName, parameters interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsClient)(nil).Create), ctx, resourceGroupName, accountName, parameters)
}

// GetProperties mocks base method
func (m *MockIAccountsClient) GetProperties(ctx context.Context, resourceGroupName, accountName string) (storage.Account, error) {
	ret := m.ctrl.Call(m, "GetProperties", ctx, resourceGroupName, accountName)
	ret0, _ := ret[0].(storage.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties
func (mr *MockIAccountsClientMockRecorder) GetProperties(ctx, resourceGroupName, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockIAccountsClient)(nil).GetProperties), ctx, resourceGroupName, accountName)
}

// Delete mocks base method
func (m *MockIAccountsClient) Delete(ctx context.Context, resourceGroupName, accountName string) (autorest.Response, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, accountName)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockIAccountsClientMockRecorder) Delete(ctx, resourceGroupName, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAccountsClient)(nil).Delete), ctx, resourceGroupName, accountName)
}

// ListKeys mocks base method
func (m *MockIAccountsClient) ListKeys(ctx context.Context, resourceGroupName, accountName string) (storage.AccountListKeysResult, error) {
	ret := m.ctrl.Call(m, "ListKeys", ctx, resourceGroupName, accountName)
	ret0, _ := ret[0].(storage.AccountListKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockIAccountsClientMockRecorder) ListKeys(ctx, resourceGroupName, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockIAccountsClient)(nil).ListKeys), ctx, resourceGroupName, accountName)
}

// MockIWaitForCompletion is a mock of IWaitForCompletion interface
type MockIWaitForCompletion struct {
	ctrl     *gomock.Controller
	recorder *MockIWaitForCompletionMockRecorder
}

// MockIWaitForCompletionMockRecorder is the mock recorder for MockIWaitForCompletion
type MockIWaitForCompletionMockRecorder struct {
	mock *MockIWaitForCompletion
}

// NewMockIWaitForCompletion creates a new mock instance
func NewMockIWaitForCompletion(ctrl *gomock.Controller) *MockIWaitForCompletion {
	mock := &MockIWaitForCompletion{ctrl: ctrl}
	mock.recorder = &MockIWaitForCompletionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWaitForCompletion) EXPECT() *MockIWaitForCompletionMockRecorder {
	return m.recorder
}

// Wait mocks base method
func (m *MockIWaitForCompletion) Wait(account storage.AccountsCreateFuture, ctx context.Context, autoRestClient *autorest.Client) error {
	ret := m.ctrl.Call(m, "Wait", account, ctx, autoRestClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockIWaitForCompletionMockRecorder) Wait(account, ctx, autoRestClient interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockIWaitForCompletion)(nil).Wait), account, ctx, autoRestClient)
}
